generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    role          Role         @default(user)
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
    auditLogs     AuditLog[]
    loanBridges   LoanBridge[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Document {
    id            Int            @id @default(autoincrement())
    userId        String
    name          String
    key           String         @unique
    url           String         @unique
    currentStatus DocumentStatus @default(PENDING)
    User          User           @relation(fields: [userId], references: [id])
}

model LoanBridge {
    id        String         @id @default(cuid())
    userId    String
    loanId    String
    status    DocumentStatus
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    user User @relation(fields: [userId], references: [id])
    loan Loan @relation(fields: [loanId], references: [id])

    @@unique([userId, loanId])
    @@index([userId])
    @@index([loanId])
}

model Loan {
    id                String       @id @default(cuid())
    userId            String
    businessName      String
    businessType      String
    taxId             String
    yearEstablished   Int
    annualRevenue     Float
    numberOfEmployees Int
    businessAddress   String
    city              String
    state             String
    zipCode           String
    contactFirstName  String
    contactLastName   String
    contactEmail      String
    contactPhone      String
    amount            Float
    loanPurpose       String
    propertyType      String
    propertyUse       String
    creditScore       Int
    downPayment       Float
    hasCoBorrower     Boolean
    createdAt         DateTime     @default(now())
    updatedAt         DateTime     @updatedAt
    loanBridge        LoanBridge[]

    @@index([userId])
}

model AuditLog {
    id        String   @id @default(cuid())
    userId    String
    action    String
    timestamp DateTime @default(now())
    details   String?  @db.Text
    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

enum DocumentStatus {
    PENDING
    UNDER_REVIEW
    APPROVED
    REJECTED
    CANCELLED
}

enum Role {
    user
    admin
}
