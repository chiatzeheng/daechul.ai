generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    role          Role           @default(user)
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
    notifications Notification[]
    auditLogs     AuditLog[]
    loan          Loan[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Document {
    id            Int               @id @default(autoincrement())
    userId        String
    user          User              @relation(fields: [userId], references: [id])
    documentType  String
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    versions      DocumentVersion[]
    currentStatus DocumentStatus    @default(PENDING)

    @@index([userId])
}

model DocumentVersion {
    id         Int            @id @default(autoincrement())
    documentId Int
    document   Document       @relation(fields: [documentId], references: [id])
    version    Int
    fileKey    String
    createdAt  DateTime       @default(now())
    status     DocumentStatus
    comment    String?        @db.Text

    @@unique([documentId, version])
    @@index([documentId])
}

model Loan {
    id        String         @id @default(cuid())
    userId    String
    amount    Float
    status    DocumentStatus
    createdAt DateTime       @default(now())
    user      User           @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    message   String   @db.Text
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model AuditLog {
    id        String   @id @default(cuid())
    userId    String
    action    String
    timestamp DateTime @default(now())
    details   String?  @db.Text
    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

enum DocumentStatus {
    PENDING
    APPROVED
    REJECTED
}

enum Role {
    user
    admin
}
